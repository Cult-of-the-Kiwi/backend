services:
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: ./Dockerfile
    ports:
      - 3000:3000
    volumes:
      - ./api-gateway/config:/app/config # Change this on deployment
    environment:
      - CARGO_ENV
      - JWT_SECRET=justalongenoughkeyforhs256algorithm
      - CORS_ORIGIN="localhost"
      - CONFIG_PATH=/app/config/config.toml
    networks:
      - backend

  auth-service:
    build:
      context: ./auth-service
      dockerfile: ./Dockerfile
    ports:
      - 3001:3000
    environment:
      - CARGO_ENV
      - FLUVIO_ADDR=sc:9003
      - AUTH_DATABASE_URL=postgres://postgres:password@auth-db:5432/authdb
      - CORS_ORIGIN="localhost"
      - JWT_SECRET=justalongenoughkeyforhs256algorithm
      - DB_MAX_CONNECTIONS=5
      - DB_POOL_TIMEOUT_SECS=10
      - RUST_LOG=info
    depends_on:
      - auth-db
      - sc
    networks:
      - backend

  auth-db:
    image: postgres
    restart: always
    environment: 
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: authdb
    ports:
      - 5433:5432
    volumes:
      - authdata:/var/lib/postgresql/data
    networks:
      - backend

  call-service:
    build:
      context: ./call-service
      dockerfile: ./Dockerfile
    ports:
      - 3002:3000
    environment:
      - FLUVIO_ADDR=sc:9003
      - CARGO_ENV
      - CALL_DATABASE_URL=postgres://postgres:password@call-db:5432/calldb
      - CORS_ORIGIN=localhost,lamoara.duckdns.org
      - JWT_SECRET=justalongenoughkeyforhs256algorithm
      - RUST_LOG=debug
    networks:
      - backend
    depends_on:
      - call-db

  call-db:
    image: postgres
    restart: always
    environment: 
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: calldb
    ports:
      - 5437:5432
    volumes:
      - calldata:/var/lib/postgresql/data
    networks:
      - backend

  group-service:
    build:
      context: ./group-service
      dockerfile: ./Dockerfile
    ports:
      - 3003:3000
    environment:
      - CARGO_ENV
      - GROUP_DATABASE_URL=postgres://postgres:password@group-db:5432/groupdb
      - CORS_ORIGIN=localhost
      - JWT_SECRET=justalongenoughkeyforhs256algorithm
      - DB_MAX_CONNECTIONS=5
      - DB_POOL_TIMEOUT_SECS=10
      - RUST_LOG=info
      - FLUVIO_ADDR=sc:9003
      - PRODUCER_TOPIC=group-events
    depends_on:
      - group-db
      - sc
      - spu
    networks:
      - backend

  group-db:
    image: postgres
    restart: always
    environment: 
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: groupdb
    ports:
      - 5435:5432
    volumes:
      - groupdata:/var/lib/postgresql/data
      - ./group-service/migrations/01_setup_schema.sql:/docker-entrypoint-initdb.d/01_setup_schema.sql:ro
    networks:
      - backend

  message-service:
    build:
      context: ./message-service
      dockerfile: ./Dockerfile
    ports:
      - 3004:3000
    environment:
      - CARGO_ENV
      - MESSAGE_DATABASE_URL=postgres://postgres:password@message-db:5432/messagedb
      - CORS_ORIGIN=localhost
      - JWT_SECRET=justalongenoughkeyforhs256algorithm
      - DB_MAX_CONNECTIONS=5
      - DB_POOL_TIMEOUT_SECS=10
      - RUST_LOG=info
      - FLUVIO_ADDR=sc:9003
      - PRODUCER_TOPIC=message-events
      - GROUP_SERVICE_URL=http://group-service:3000
    depends_on:
      - message-db
      - sc
      - spu
    networks:
      - backend

  message-db:
    image: postgres
    restart: always
    environment: 
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: messagedb
    ports:
      - 5436:5432
    volumes:
      - messagedata:/var/lib/postgresql/data
      - ./message-service/migrations/01_setup_schema.sql:/docker-entrypoint-initdb.d/01_setup_schema.sql:ro
    networks:
      - backend

  notification-service:
    build:
      context: ./notification-service
      dockerfile: ./Dockerfile
    ports:
      - 3005:3000
    environment:
      - JWT_SECRET=justalongenoughkeyforhs256algorithm
      - CORS_ORIGIN="localhost"
      - FLUVIO_ADDR=sc:9003
      - USER_ANSWER_TOPIC=friendships-answer
      - USER_RESQUEST_TOPIC=friendships-request
      - MESSAGE_EVENTS_TOPIC=message-events
      - GROUP_EVENTS_TOPIC=group-events
      - SOCKET_ADDR=0.0.0.0:3000
      - RUST_LOG=Info
      - CARGO_ENV
    networks:
      - backend
    depends_on:
        - sc
        - spu

  user-service:
    build:
      context: ./user-service
      dockerfile: ./Dockerfile
    ports:
      - 3007:3000
    environment:
      - CORS_ORIGIN=http://localhost:3000
      - DATABASE_URL=postgres://postgres:password@user-db:5432/userdb
      - SOCKET_ADDR=0.0.0.0:3000
      - FLUVIO_ADDR=sc:9003
      - PRODUCER_TOPIC=user
      - CONSUMER_TOPIC=auth
      - JWT_SECRET=justalongenoughkeyforhs256algorithm
      - CARGO_ENV
    networks:
      - backend
    depends_on:
      - sc
      - spu
      - user-db
  
  user-db:
    image: postgres
    restart: always
    environment: 
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: userdb
    ports:
      - 5434:5432
    volumes:
      - userdata:/var/lib/postgresql/data
    networks:
      - backend

  sc:
    image: infinyon/fluvio:stable
    container_name: sc
    hostname: sc
    ports:
      - 9103:9003
    environment:
      - RUST_LOG=info
    command: "./fluvio-run sc --local /fluvio/metadata"
    volumes:
      - ./fluvio/fluvio-metadata:/fluvio/metadata
    networks:
      - backend

  sc-setup:
    build:
      context: ./fluvio
      dockerfile: Dockerfile
    container_name: sc-setup
    environment:
      - RUST_LOG=info
    entrypoint: >
      /bin/sh -c "
      fluvio profile add docker sc:9003 docker;
      fluvio cluster spu register --id 5001 -p spu:9010 --private-server spu:9011;
      exit 0;
      "
    depends_on:
      - sc
    networks:
      - backend

  spu:
    image: infinyon/fluvio:stable
    container_name: spu
    hostname: spu
    volumes:
      - ./fluvio/fluvio-data:/fluvio/data
    environment:
      - RUST_LOG=info
    ports:
      - "9110:9010"
      - "9111:9011"
    command: "./fluvio-run spu -i 5001 -p spu:9010 -v spu:9011 --sc-addr sc:9004 --log-base-dir /fluvio/data"
    depends_on:
      - sc
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  authdata:
  userdata:
  messagedata:
  groupdata:
  calldata:
